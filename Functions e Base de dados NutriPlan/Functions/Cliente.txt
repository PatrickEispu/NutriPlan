CREATE OR REPLACE FUNCTION criar_cliente(
    p_ds_genero VARCHAR(1),
    p_nr_peso DOUBLE PRECISION,
    p_nr_altura DOUBLE PRECISION,
    p_ds_data_nascimento VARCHAR(255),
    p_nr_tmb DOUBLE PRECISION,
    p_nr_get DOUBLE PRECISION,
    p_nm_categoria VARCHAR,  -- Recebe o nome da categoria
    p_fk_nr_id_conta INT
)
RETURNS INT AS $$
DECLARE
    new_id INT;
    v_id_categoria INT;  -- Variável para armazenar o ID da categoria
BEGIN
    -- Buscar o ID da categoria com base no nome
    SELECT nr_id_categoria INTO v_id_categoria
    FROM categoria
    WHERE nm_categoria = p_nm_categoria;

    -- Inserir os dados na tabela cliente
    INSERT INTO cliente (ds_genero, nr_peso, nr_altura, ds_data_nascimento, nr_tmb, nr_get, fk_nr_id_categoria, fk_nr_id_conta)
    VALUES (p_ds_genero, p_nr_peso, p_nr_altura, p_ds_data_nascimento, p_nr_tmb, p_nr_get, v_id_categoria, p_fk_nr_id_conta)
    RETURNING fk_nr_id_conta INTO new_id;

    RETURN new_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION listar_todos_clientes()
RETURNS TABLE(
    id_conta INT,
    nome VARCHAR,
    email VARCHAR,
    senha VARCHAR,
    genero VARCHAR,
    peso DOUBLE PRECISION,
    altura DOUBLE PRECISION,
    data_nascimento VARCHAR,
    tmb DOUBLE PRECISION,
    get DOUBLE PRECISION,
    categoria_nome VARCHAR,
    tipo_conta_nome VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        co.nr_id_conta AS id_conta,
        co.nm_nome AS nome,
        co.ds_email AS email,
        co.ds_senha AS senha,
        c.ds_genero AS genero,
        c.nr_peso AS peso,
        c.nr_altura AS altura,
        c.ds_data_nascimento AS data_nascimento,
        c.nr_tmb AS tmb,
        c.nr_get AS get,
        ca.nm_categoria AS categoria_nome,
        tc.nm_tipo_conta AS tipo_conta_nome
    FROM cliente c
    INNER JOIN conta co ON c.fk_nr_id_conta = co.nr_id_conta
    INNER JOIN tipo_conta tc ON co.fk_nr_id_tipo_conta = tc.nr_id_tipo_conta
    INNER JOIN categoria ca ON c.fk_nr_id_categoria = ca.nr_id_categoria;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION buscar_cliente_por_id(
    p_fk_nr_id_conta INT
)
RETURNS TABLE(
    fk_nr_id_conta INT,
    ds_genero CHAR(1),
    nr_peso NUMERIC,
    nr_altura NUMERIC,
    ds_data_nascimento VARCHAR,
    nr_tmb DOUBLE PRECISION,
    nr_get DOUBLE PRECISION,
    fk_nr_id_categoria INT
) AS $$
BEGIN
    RETURN QUERY
    SELECT fk_nr_id_conta, ds_genero, nr_peso, nr_altura, ds_data_nascimento, nr_tmb, nr_get, fk_nr_id_categoria
    FROM cliente
    WHERE fk_nr_id_conta = p_fk_nr_id_conta;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE atualizar_cliente_procedure(
    p_id_conta INT,
    p_ds_genero VARCHAR,
    p_nr_peso DOUBLE PRECISION,
    p_nr_altura DOUBLE PRECISION,
    p_ds_data_nascimento VARCHAR(255),
    p_nr_tmb DOUBLE PRECISION,
    p_nr_get DOUBLE PRECISION,
    p_nm_categoria VARCHAR  -- Nome da categoria
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_id_categoria INT;  -- Variável para armazenar o ID da categoria
BEGIN
    -- Buscar o ID da categoria com base no nome
    SELECT nr_id_categoria INTO v_id_categoria
    FROM categoria
    WHERE nm_categoria = p_nm_categoria;

    -- Atualizar os dados na tabela cliente
    UPDATE cliente
    SET
        ds_genero = p_ds_genero,
        nr_peso = p_nr_peso,
        nr_altura = p_nr_altura,
        ds_data_nascimento = p_ds_data_nascimento,
        nr_tmb = p_nr_tmb,
        nr_get = p_nr_get,
        fk_nr_id_categoria = v_id_categoria
    WHERE fk_nr_id_conta = p_id_conta;

    -- Commit explícito se necessário (caso não esteja sendo gerenciado por transação externa)
    COMMIT;
END;
$$;
